generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL")
}

model billing_requests {
  id                 Int              @id @default(autoincrement())
  customer_id        Int
  gateway_id         Int
  billing_request_id String           @unique
  status             String           @default("pending")
  created_at         DateTime         @default(now())
  updated_at         DateTime
  amount             Decimal          @db.Decimal(10, 2)
  frequency          String           @db.VarChar(50)
  collection_day     Int
  customers          customers        @relation(fields: [customer_id], references: [id], onDelete: Cascade)
  payment_gateways   payment_gateways @relation(fields: [gateway_id], references: [id], onDelete: Cascade)
}

model customers {
  id                         Int                         @id @default(autoincrement())
  donorfy_constituent_id     String                      @unique
  donorfy_constituent_number String                      @unique
  donorfy_instance           String?
  already_in_donorfy         Boolean?
  created_at                 DateTime                    @default(now())
  updated_at                 DateTime
  billing_requests           billing_requests[]
  mandates                   mandates[]
  payment_gateway_customers  payment_gateway_customers[]
  payments                   payments[]
  subscriptions              subscriptions[]
}

model mandates {
  id               Int              @id @default(autoincrement())
  customer_id      Int
  gateway_id       Int
  mandate_id       String           @unique
  status           String           @default("pending")
  created_at       DateTime         @default(now())
  updated_at       DateTime
  customers        customers        @relation(fields: [customer_id], references: [id], onDelete: Cascade)
  payment_gateways payment_gateways @relation(fields: [gateway_id], references: [id], onDelete: Cascade)
}

model payment_gateway_customers {
  id                  Int              @id @default(autoincrement())
  customer_id         Int
  gateway_id          Int
  gateway_customer_id String
  created_at          DateTime         @default(now())
  updated_at          DateTime
  customers           customers        @relation(fields: [customer_id], references: [id], onDelete: Cascade)
  payment_gateways    payment_gateways @relation(fields: [gateway_id], references: [id], onDelete: Cascade)

  @@unique([customer_id, gateway_id])
}

model payment_gateways {
  id                        Int                         @id @default(autoincrement())
  name                      String
  created_at                DateTime                    @default(now())
  updated_at                DateTime
  billing_requests          billing_requests[]
  mandates                  mandates[]
  payment_gateway_customers payment_gateway_customers[]
  payments                  payments[]
  processed_events          processed_events[]
  subscriptions             subscriptions[]
}

model payments {
  id               Int              @id @default(autoincrement())
  customer_id      Int
  subscription_id  Int
  gateway_id       Int
  payment_id       String
  status           String           @default("pending")
  created_at       DateTime         @default(now())
  updated_at       DateTime
  customers        customers        @relation(fields: [customer_id], references: [id], onDelete: Cascade)
  payment_gateways payment_gateways @relation(fields: [gateway_id], references: [id], onDelete: Cascade)
  subscriptions    subscriptions    @relation(fields: [subscription_id], references: [id], onDelete: Cascade)

  @@unique([payment_id, gateway_id])
}

model processed_events {
  id               Int              @id @default(autoincrement())
  gateway_id       Int
  event_id         String
  processed_at     DateTime         @default(now())
  payment_gateways payment_gateways @relation(fields: [gateway_id], references: [id], onDelete: Cascade)

  @@unique([event_id, gateway_id])
}

model subscriptions {
  id               Int              @id @default(autoincrement())
  customer_id      Int
  gateway_id       Int
  subscription_id  String?
  status           String           @default("pending")
  created_at       DateTime         @default(now())
  updated_at       DateTime
  amount           Decimal          @db.Decimal(10, 2)
  frequency        String           @db.VarChar(50)
  collection_day   Int?
  payments         payments[]
  customers        customers        @relation(fields: [customer_id], references: [id], onDelete: Cascade)
  payment_gateways payment_gateways @relation(fields: [gateway_id], references: [id], onDelete: Cascade)

  @@unique([subscription_id, customer_id])
}
